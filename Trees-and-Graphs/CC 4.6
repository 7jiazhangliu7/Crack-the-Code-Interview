/**
 * Created by Jiazhang_Liu on 5/20/2015.
 */

//Write an algorithm to find the 'next'node (i.e., in-order successor) of a given node in
//a binary search tree. You may assume that each node has a link to its parent
public class inOrderSuccessor {

    public Node find(Node node) {
        if(node == null || node.parent == null) return node;

        if(node.right != null) {
            return leftMost(node);
        } else {
            Node q = node;
            Node p = q.parent;

            while(p != null && p.left != q) {
                q = p;
                p = p.parent;
            }

            return p;
        }
    }

    public Node leftMost(Node node) {
        if(node == null) {
            return null;
        }

        while(node.left != null) {
            node = node.left;
        }

        return node;
    }

    public static void main(String args[]) {
        inOrderSuccessor i = new inOrderSuccessor();

        Node root = new Node(5);
        Node n1 = new Node(3);
        Node n2 = new Node(7);
        Node n3 = new Node(2);
        Node n4 = new Node(4);
        Node n5 = new Node(6);
        Node n6 = new Node(8);
        Node n7 = new Node(1);

        root.left = n1;root.right = n2;
        n1.left = n3; n1.right = n4;n1.parent = root;
        n2.left = n5; n2.right = n6;n2.parent = root;
        n3.left = n7;n3.parent = n1; n4.parent = n1;
        n5.parent = n2;n6.parent = n2;n7.parent = n3;

        System.err.println(i.find(n5).val);
    }

    static class Node {
        int val;
        Node left;
        Node right;
        Node parent;
        Node(int val) {
            this.val = val;
        }
    }
}
