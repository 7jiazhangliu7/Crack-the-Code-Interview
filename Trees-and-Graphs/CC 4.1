/**
 * Created by Jiazhang_Liu on 5/20/2015.
 */

//Implement a function to check if a binary tree is balanced. For the purposes of this
//question, a balanced tree is defined to be a tree such that the heights of the two
//subtrees of any node never differ by more than one.

public class BalancedBinaryTree {
    public boolean isBalanced(TreeNode root) {
        if(checkHeight(root) == -1) {
            return false;
        } else {
            return true;
        }
    }

    public int checkHeight(TreeNode root) {
        if(root == null) {
            return 0;
        }

        int left = checkHeight(root.left);
        if(left == -1) return -1;

        int right = checkHeight(root.right);
        if(right == -1) return -1;

        int diff = Math.abs(left-right);

        if(diff > 1) {
            return -1;
        } else {
            return 1 + Math.max(left, right);
        }
    }

    public static void main(String args[]) {
        BalancedBinaryTree bbt = new BalancedBinaryTree();
        TreeNode root = new TreeNode(10);
        TreeNode n1 = new TreeNode(10);
        TreeNode n2 = new TreeNode(10);
        TreeNode n3 = new TreeNode(10);
        TreeNode n4 = new TreeNode(10);
        TreeNode n5 = new TreeNode(10);
        TreeNode n6 = new TreeNode(10);
        TreeNode n7 = new TreeNode(10);
        TreeNode n8 = new TreeNode(10);

        root.left = n1;
        root.right = n2;
        n1.left = n3;
        n1.right = n4;
        n2.left = n5;
        n2.right = n6;

        System.err.println(bbt.isBalanced(root));

        n3.left = n7;
        n7.left = n8;

        System.err.println(bbt.isBalanced(root));
    }

    static class TreeNode {
        TreeNode left;
        TreeNode right;
        int val;
        TreeNode(int val) {
            this.val = val;
        }
    }
}
