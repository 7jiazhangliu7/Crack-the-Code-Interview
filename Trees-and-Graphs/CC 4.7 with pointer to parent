/**
 * Created by Jiazhang_Liu on 5/20/2015.
 */

//Design an algorithm and write code to find the first common ancestor of two nodes
//in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not
//necessarily a binary search tree.

public class FirstCommonAncestor {

    public Node find(Node n1, Node n2) {
        if(n1 == null || n2 == null) {
            return null;
        }
        if(n1 == n2) return n1;

        int d1 = depth(n1);
        int d2 = depth(n2);

        if(d1 > d2) {
            while(d1 > d2 && n1 != null) {
                if(n1.parent == null) return n1;
                n1 = n1.parent;
                if(n1 == n2) return n1;
            }
        } else {
            while(d2 > d1 && n2 != null) {
                if(n2.parent == null) return n2;
                n2 = n2.parent;
                if(n1 == n2) return n1;
            }
        }

        while(n1 != null && n2 != null && n1 != n2) {
            n1 = n1.parent;
            n2 = n2.parent;
        }

        return n1;
    }

    public int depth(Node node) {
        int depth = 0;

        while(node.parent != null) {
            node = node.parent;
            depth++;
        }

        return depth;
    }

    public static void main(String args[]) {
        FirstCommonAncestor i = new FirstCommonAncestor();

        Node root = new Node(5);
        Node n1 = new Node(3);
        Node n2 = new Node(7);
        Node n3 = new Node(2);
        Node n4 = new Node(4);
        Node n5 = new Node(6);
        Node n6 = new Node(8);
        Node n7 = new Node(1);

        root.left = n1;root.right = n2;
        n1.left = n3; n1.right = n4;n1.parent = root;
        n2.left = n5; n2.right = n6;n2.parent = root;
        n3.left = n7;n3.parent = n1; n4.parent = n1;
        n5.parent = n2;n6.parent = n2;n7.parent = n3;

        System.err.println(i.find(n7,n1).val);
    }

    static class Node {
        int val;
        Node left;
        Node right;
        Node parent;
        Node(int val) {
            this.val = val;
        }
    }
}
