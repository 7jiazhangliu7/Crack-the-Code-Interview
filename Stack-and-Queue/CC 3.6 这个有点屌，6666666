import java.util.Stack;

/**
 * Created by Jiazhang_Liu on 5/19/2015.
 */

//Write a program to sort a stack in ascending order (with biggest items on top).
//You may use at most one additional stack to hold items, but you may not copy the
//elements into any other data structure (such as an array). The stack supports the
//following operations: push, pop, peek, and isEmpty.

public class SortStack {
    Stack<Integer> temp = new Stack<Integer>();
    public Stack<Integer> sortStack(Stack<Integer> stack) {
        if(stack == null || stack.isEmpty()) return stack;

        while(!stack.isEmpty()) {
            int val = stack.pop();

            while(!temp.isEmpty() && temp.peek() > val) {
                stack.push(temp.pop());
            }

            temp.push(val);
        }

        return temp;
    }

    public static void main(String args[]) {
        SortStack ss = new SortStack();
        Stack<Integer> s = new Stack<Integer>();
        s.push(3);
        s.push(5);
        s.push(2);
        s.push(1);

        System.err.println(ss.sortStack(s));
    }
}
